import {expectType} from 'tsd';
import is from './index.js';

expectType<boolean>(is.a('foo', 'string'));
expectType<boolean>(is.type('foo', 'string'));
expectType<boolean>(is.defined('foo'));
expectType<boolean>(is.empty('foo'));
expectType<boolean>(is.hosted('foo', ['foo', 'bar']));
expectType<boolean>(is.instance('foo', {}));
expectType<boolean>(is.instanceof('foo', {}));
expectType<boolean>(is.nil('foo'));
expectType<boolean>(is.null('foo'));
expectType<boolean>(is.undef('foo'));
expectType<boolean>(is.undefined('foo'));
expectType<boolean>(is.args('foo'));
expectType<boolean>(is.arguments('foo'));
expectType<boolean>(is.empty('foo'));
expectType<boolean>(is.array('foo'));
expectType<boolean>(is.arraylike('foo'));
expectType<boolean>(is.bool('foo'));
expectType<boolean>(is.boolean('foo'));
expectType<boolean>(is.false('foo'));
expectType<boolean>(is.true('foo'));
expectType<boolean>(is.date('foo'));
expectType<boolean>(is.date.valid('foo'));
expectType<boolean>(is.element('foo'));
expectType<boolean>(is.error('foo'));
expectType<boolean>(is.fn('foo'));
expectType<boolean>(is.function('foo'));
expectType<boolean>(is.thenable('foo'));
expectType<boolean>(is.promise('foo'));
expectType<boolean>(is.num('foo'));
expectType<boolean>(is.number('foo'));
expectType<boolean>(is.infinite('foo'));
expectType<boolean>(is.decimal('foo'));
expectType<boolean>(is.int('foo'));
expectType<boolean>(is.integer('foo'));
expectType<boolean>(is.safeInteger('foo'));
expectType<boolean>(is.bigInt('foo'));
expectType<boolean>(is.float('foo'));
expectType<boolean>(is.nan('foo'));
expectType<boolean>(is.object('foo'));
expectType<boolean>(is.primitive('foo'));
expectType<boolean>(is.hash('foo'));
expectType<boolean>(is.regexp('foo'));
expectType<boolean>(is.string('foo'));
expectType<boolean>(is.base64('foo'));
expectType<boolean>(is.hex('foo'));
expectType<boolean>(is.symbol('foo'));
expectType<boolean>(is.event('foo'));
expectType<boolean>(is.map('foo'));
expectType<boolean>(is.weakMap('foo'));
expectType<boolean>(is.set('foo'));
expectType<boolean>(is.weakSet('foo'));
expectType<boolean>(is.node());
expectType<boolean>(is.browser());
